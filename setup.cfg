#Project specific configuration used by the following tools:
#   - nosetests
#   - flake8
#
# nosetests only support setup.cfg. flake8 supports both setup.cfg and tox.ini. In
# In order to not have too many files around, we'll use setup.cfg for now.

[flake8]
# The jenkins violations plugin can read the pylint format.
format=pylint

# Measure cyclomatic complexity.
# http://en.wikipedia.org/wiki/Cyclomatic_complexity#Limiting_complexity_during_development
# The current value is set so that the build doesn't fail. At least we won't
# make the software more complex.
max-complexity = 25
max-line-length = 120
# E203: https://github.com/ambv/black#slices
# E501: Ignore `E501` that checks line length. We're using `black` for formatting and it will try to
# keep the line length below the configured length if possible but may choose to not do it in
# certain special cases.
ignore = E203, E402, E501, W503, W602
# .svn,CVS,.bzr,.hg,.git,__pycache__:
#   default excludes
# venv/:
#  third party libraries are all stored in venv - so we don't want to
#  check them for style issues.
# get-pip.py:
#  a public file coming directly from upstream.
# salt/var/cache/:
#   used by salt to cache all module files when run in non-root mode. This
#   includes upstream modules that are not complient with coding style.
exclude=.svn,CVS,.bzr,.hg,.git,__pycache__,venv,get-pip.py,salt/var/cache/,redis-monitoring.py

# flake8-tidy-imports rules
# Soft Lint: Sort using sublime "Sort Lines"
banned-modules =
  #lyft.logging = Use `lyft_logging import logging`
  #lyft.regioncfg = Use `lyft_regions_client`
  collections.namedtuple = Use `typing.NamedTuple` or make a class
  dateutil.parser = Use `ciso8601` instead
  flask.ext.restful = Use `flask_restful instead`
  flask.ext.script = Use `flask_script instead`
  haversine = Use `from fast_distance import haversine`
  json = Use `from ujson import json`
# logging = Use `from lyft_logging import logging`
#   lyft.api_client = Use `lyft_requests`
#   lyft.datetime = Use `from lyft_datetime import datetime`
#   lyft.elasticsearch.Elasticsearch = Use `from lyft_elasticsearch.client import Elasticsearch`
#   lyft.elasticsearch.IAMRoleV4Auth = Use `from lyft_elasticsearch.client import IAMRoleV4Auth`
#   lyft.exceptions.ImproperlyConfigured = Use `from lyft_exceptions.exceptions import ImproperlyConfigured`
#   lyft.exceptions.LyftImportError = Use `from lyft_exceptions.exceptions import LyftImportError`
#   lyft.exceptions.LyftImportWarning = Use `from lyft_exceptions.warnings import LyftImportWarning`
#   lyft.gevent = Use `gevent`
#   lyft.mixins.Loggable = Use `from lyft_logging.mixin import Loggable`
#   lyft.mixins.Statsable = Use `from lyft_stats.mixin import Statsable`
#   lyft.regions_client = Use `lyft_regions_client`
#   lyft.requests = Use `lyft_requests`
#   lyft.service_area = Use `lyft_regions_client`
#   lyft.service_area.service_area = Use `from lyft_regions_client import service_area`
#   lyft.settings = Use `from lyft_settings import settings`
#   lyft.stats = Use `from lyft_stats import stats`
#   lyft.tcs_client.TCSClient = Use `from lyft_experimentation.tcs.tcs_client import TCSClient`
#   lyft.tcs_client.TCSDevelopmentClient = Use `from lyft_experimentation.tcs.tcs_development_client import TCSDevelopmentClient`
#   lyft.tcs_client.WebTCSClient = Use `from lyft_experimentation.tcs.tcs_web_client import WebTCSClient`
#   lyft.tracing.get_span_context = Use `from lyft_tracing.tracing import get_span_context`
#   lyft.tracing.initialize_tracing = Use `from lyft_tracing.tracing import initialize_tracing`
#   lyft_logging.logging.to_log = Use kv= log syntax
  typing.Text = Use str

[pep8]
max-line-length = 120
ignore = E402, W503

[isort]
line_length=120
skip=raw.py,app_wsgi.py,manage.py
# 3 is Vertical hanging indent https://github.com/timothycrosley/isort#multi-line-output-modes
multi_line_output=3
known_first_party=app,tests
known_third_party=amazon_kclpy,boto3,botocore,cached_property,cachetools,ciso8601,confluent_kafka,cryptography,dtw,dynamex,eval_utils,fast_distance,flaky,flask,flask_script,freezegun,geohash,geojson,gevent,gipc,google,iterutils,lmdb,locations_models,lyft,lyft_analysis,lyft_datetime,lyft_experimentation,lyft_kafkaclient,lyft_locations,lyft_logging,lyft_public_api,lyft_ratelimit,lyft_regions_client,lyft_requests,lyft_settings,lyft_stats,mapgraph,marketplace,marshmallow,mmh3,mock,more_itertools,moto,msgpack,nsq,numpy,pandas,pb,processing,psutil,pydruid,pykalman,pynamodb,pyspark,pytest,pytz,redis,requests,shapely,simplejson,six,sklearn,statsd,uhashring,ujson,webargs,yaml
include_trailing_comma=true

[coverage:xml]
output = build/coverage.xml

[coverage:html]
directory = build/coverage/
title = "Static Assignment Coverage"

[coverage:report]
fail_under = 85
# Exclude the following:
# 1. Have to re-enable the standard pragma
# 2. Don't complain for mypy type check imports
exclude_lines =
    \#\s*pragma: no cover
    ^if TYPE_CHECKING:

[coverage:run]
concurrency = gevent
# omit =
#     locations/realtime/projection/data_upload.py
#     locations/routes/testharness.py
#     locations/scripts/adjustable_projection.py
#     locations/scripts/bootstrap_keys.py
#     locations/scripts/bulk_redis_expire.py
#     locations/scripts/create_development_kinesis_streams.py
#     locations/scripts/create_unsharded_tables.py
#     locations/scripts/nsq2dynamo.py
#     locations/scripts/ops_rides/*
#     locations/scripts/projection_eval/*
#     locations/scripts/utils/*
#     locations/scripts/viaroute_degradation.py
#     locations/scripts/visualization_outputs/*
#     locations/scripts/visualizers/*
#     locations/scripts/realtime_worker_visualization_generator.py
#     locations/scripts/kafka/kafka_golden_file_producer.py
#     locations/scripts/kafka/kafka_rtmm_experiment.py
#     locations/scripts/kafka/kafka_imm_experiment.py
#     locations/scripts/ops_rides/post_map_match_correction.py
#     locations/scripts/ops_rides/toll_calculations.py

# [mypy-locations.*]
# disallow_untyped_defs = True

# # TODO: Mypy the following file

# [mypy-locations.scripts.projection_eval.evaluation]
# disallow_untyped_defs = False
